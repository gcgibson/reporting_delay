for (i in 1:nrow(data)){
for (j in 1:ncols){
zero_part <- rbinom(1,1,logit_pi[i,j])
yrep[i,j] <- zero_part*rpois(1,log_lambda[i,j])
}
}
return (yrep)
}
#in sample
yrep <- generate_yrep_from_mcmc(mod,400,dat[train_index,])
yrep_mean <- rowMeans(yrep)
plot(yrep_mean - dat$y[train_index])
#out of  sample
yrep_test <- generate_yrep_from_mcmc(mod_test,400,dat[test_index_test,])
yrep_mean_test <- rowMeans(yrep_test)
polygon(c(1:20,rev(1:20)),c(yrep_test,rev(df$U)),col = "grey75", border = FALSE)
plot(yrep_mean_test[1:20],lty=1,type="l",col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
lines(dat$y[test_index_test][1:20])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
yrep_test
yrep_test
yrep_test
dim(yrep_test)
View(yrep_test)
nrow(yrep_mean_test)
yrep_mean_test
yrep_lower_ci_test <- c()
yrep_upper_ci_test <- c()
for (i in 1:length(yrep_mean_test)){
yrep_lower_ci_test <- c(yrep_lower_ci_test, quantile(yrep_test,c(.025)))
yrep_upper_ci_test <- c(yrep_upper_ci_test, quantile(yrep_test,c(.975)))
}
yrep_lower_ci_test
yrep_upper_ci_test
library(boot)
### Data needs to be a dataframe with
### x2
### x3
### x4
### age
### race
generate_yrep_from_mcmc <- function(mod,nsamples,data){
ncols <- nsamples
beta_star_j <- mod$BUGSoutput$sims.list$beta.j[,,1]
beta_star_0 <- beta_star_j[,1]
beta_star_1 <- beta_star_j[,2]
beta_star_2 <- beta_star_j[,3]
beta_star_3 <- beta_star_j[,4]
beta_star_4 <- mod$BUGSoutput$sims.array[,,"beta4"]
beta_star_5 <- mod$BUGSoutput$sims.array[,,"beta5"]
alpha_star_j <- mod$BUGSoutput$sims.list$beta.j[,,1]
alpha_star_0 <- beta_star_j[,1]
alpha_star_1 <- beta_star_j[,2]
alpha_star_2 <- beta_star_j[,3]
alpha_star_3 <- beta_star_j[,4]
alpha_star_4 <- mod$BUGSoutput$sims.array[,,"alpha4"]
alpha_star_5 <- mod$BUGSoutput$sims.array[,,"alpha5"]
log_lambda <- matrix(NA,nrow = nrow(data),ncol=ncols)
count <- 1
for (i in 1:nrow(data)){
tmp <- c()
for (mc_sample in 1:ncols){
tmp <- c(tmp,exp(beta_star_0[mc_sample] + beta_star_1[mc_sample]*data$x.2[i] + beta_star_2[mc_sample]*data$x.3[i] +beta_star_3[mc_sample]*data$x.4[i] + beta_star_4[mc_sample]*data$race[i] + beta_star_5[mc_sample]*data$age[i] ))
}
log_lambda[count,] <- tmp
count <- count +1
}
logit_pi <- matrix(NA,nrow = length(train_index),ncol=ncols)
count <- 1
for (i in 1:nrow(data)){
tmp <- c()
for (mc_sample in 1:ncols){
tmp <- c(tmp,inv.logit(alpha_star_0[mc_sample] + alpha_star_1[mc_sample]*data$x.2[i] + alpha_star_2[mc_sample]*data$x.3[i] +alpha_star_3[mc_sample]*data$x.4[i] + alpha_star_4[mc_sample]*data$race[i] + alpha_star_5[mc_sample]*data$age[i] ))
}
logit_pi[count,] <- tmp
count <- count +1
}
yrep <- matrix(NA,nrow= nrow(data),ncol=ncols)
for (i in 1:nrow(data)){
for (j in 1:ncols){
zero_part <- rbinom(1,1,logit_pi[i,j])
yrep[i,j] <- zero_part*rpois(1,log_lambda[i,j])
}
}
return (yrep)
}
#in sample
yrep <- generate_yrep_from_mcmc(mod,400,dat[train_index,])
yrep_mean <- rowMeans(yrep)
plot(yrep_mean - dat$y[train_index])
#out of  sample
yrep_test <- generate_yrep_from_mcmc(mod_test,400,dat[test_index_test,])
yrep_mean_test <- rowMeans(yrep_test)
yrep_lower_ci_test <- c()
yrep_upper_ci_test <- c()
for (i in 1:length(yrep_mean_test)){
yrep_lower_ci_test <- c(yrep_lower_ci_test, quantile(yrep_test,c(.025)))
yrep_upper_ci_test <- c(yrep_upper_ci_test, quantile(yrep_test,c(.975)))
}
polygon(c(1:20,rev(1:20)),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
plot(yrep_mean_test[1:20],lty=1,type="l",col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
lines(dat$y[test_index_test][1:20])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
yrep_lower_ci_test
length(yrep_lower_ci_test)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
plot(yrep_mean_test[1:20],lty=1,type="l",col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
lines(dat$y[test_index_test][1:20])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
plot(yrep_mean_test,lty=1,type="l",col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
lines(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
lines(yrep_mean_test,lty=1,type="l",col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
lines(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
points(yrep_mean_test,lty=1,type="l",col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
points(yrep_mean_test,lty=1,type="l",col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE,alpha=.01)
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE,alpha=.01,add=FALSE)
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
?polygon
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
plot.new()
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE)
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)),col = "grey75", border = FALSE,col=rgb(1, 0, 0,0.5))
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)), border = FALSE,col=rgb(1, 0, 0,0.5))
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)), border = FALSE,col=rgb(211,211,211,0.5))
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)), border = FALSE,col=rgb(.211,.211,.211,0.5))
for (i in 1:length(yrep_mean_test)){
yrep_lower_ci_test <- c(yrep_lower_ci_test, quantile(yrep_test,c(.025)))
yrep_upper_ci_test <- c(yrep_upper_ci_test, quantile(yrep_test,c(.975)))
}
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)), border = FALSE,col=rgb(.211,.211,.211,0.5))
yrep_lower_ci_test
yrep_upper_ci_test
yrep_lower_ci_test <- c()
yrep_upper_ci_test <- c()
for (i in 1:length(yrep_mean_test)){
yrep_lower_ci_test <- c(yrep_lower_ci_test, quantile(yrep_test[i],c(.025)))
yrep_upper_ci_test <- c(yrep_upper_ci_test, quantile(yrep_test[i],c(.975)))
}
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)), border = FALSE,col=rgb(.211,.211,.211,0.5))
yrep_lower_ci_test
yrep_upper_ci_test
yrep_lower_ci_test <- c()
yrep_upper_ci_test <- c()
for (i in 1:length(yrep_mean_test)){
yrep_lower_ci_test <- c(yrep_lower_ci_test, quantile(yrep_test[i,],c(.025)))
yrep_upper_ci_test <- c(yrep_upper_ci_test, quantile(yrep_test[i,],c(.975)))
}
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.8)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)), border = FALSE,col=rgb(.211,.211,.211,0.5))
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.2)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)), border = FALSE,col=rgb(.211,.211,.211,0.5))
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train - y_true ")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.3)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)), border = FALSE,col=rgb(.211,.211,.211,0.5))
plot(yrep_mean_test,lty=1,col="blue",ylim=c(0,10),main="Out of sample predictions on the test set",ylab="yhat | y_train",xlab="Observation Index")
points(dat$y[test_index_test])
legend("topleft", legend=c("yhat", "ytrue"),
col=c("blue", "black"), lty=1:2, cex=0.4)
polygon(c(1:length(yrep_lower_ci_test),rev(1:length(yrep_lower_ci_test))),c(yrep_lower_ci_test,rev(yrep_upper_ci_test)), border = FALSE,col=rgb(.211,.211,.211,0.5))
?ppc_loo_pit_overlay
??ppc_loo_pit_overlay
?plot
?rgamma
mean(rgamma(1000,shape=1,scale=1))
mean(rgamma(1000,shape=1,scale=1))
mean(rgamma(1000,shape=1,scale=1))
mean(2*rgamma(1000,shape=1,scale=1))
mean(rgamma(1000,shape=1,scale=1/2))
mean(rgamma(1000,shape=1,scale=1/2))
mean(rgamma(1000,shape=1,scale=2))
mean(rgamma(1000,shape=1,scale=2))
mean(rgamma(1000,shape=1,scale=2))
mean(rgamma(1000,shape=1,scale=2))
mean(rgamma(1000,shape=1,rate=2))
mean(rgamma(1000,shape=1,rate=/5))
mean(rgamma(1000,shape=1,rate=.5))
?plot
allshootings$number_of_victims
allshootings$number_of_victims = allshootings$number_of_victims[(allshootings$number_of_victims != 0).any()]
number_of_victims
greater_than_0 <- c()
greater_than_0
number_of_victims
greater_than_0 <- c()
for (i in 1:length(number_of_victims)){
if (number_of_victims[i] > 0){
greater_than_0 <- c(greater_than_0, number_of_victims[i])
}
}
greater_than_0
hist(greater_than_0,main="Historgram of Number of Victims | Number of Victims > 0")
hist(greater_than_0,main="Historgram of Number of Victims | Number of Victims > 0")
greater_than_0 <- c()
for (i in 1:length(number_of_victims)){
if (number_of_victims[i] > 1){
greater_than_0 <- c(greater_than_0, number_of_victims[i])
}
}
hist(greater_than_0,main="Historgram of Number of Victims | Number of Victims > 1")
greater_than_0
greater_than_0 <- c()
for (i in 1:length(number_of_victims)){
if (number_of_victims[i] > 0){
greater_than_0 <- c(greater_than_0, number_of_victims[i])
}
}
hist(greater_than_0,main="Historgram of Number of Victims | Number of Victims > 0")
?hist
reportingTriangle(nc)
source('~/Downloads/biom12194-sm-0001-suppdatacode/R/brg.R', echo=TRUE)
#Load surveillance package. The nowcast functionality is available
#from version 1.8-0. Currently, this version is not on CRAN but only
#on R-forge -- see http://surveillance.r-forge.r-project.org for
#details on how to install this version.
library("surveillance")
#Source in extra code. This will go into the surveillance package
#in the future. Currently the functions are somewhat specific
#to the STEC O104:H4 application.
source("../R/animate-nowcast.R")
source("../R/plotPMF.R")
source("../R/plotMedianDelay.R")
source("../R/plotReportingTriangle.R")
#Load the data, which are courtesy of the Robert Koch Institute,
#Berlin, Germany.
#
#Note: The data are such that the resulting reporting triangle
#corresponds to Fig.1 of the Web appendix. This means that the reports
#which arrived with a delay longer than 15 days are set to have have
#arrived after 15 days. Altogether, this gives small discrepancies
#with the results in the manuscript. However, as mentioned in the paper,
#longer delays were not very relevant for the nowcasting.
######################################################################
data("husO104Hosp")
######################################################################
#Set some variables for the processing
######################################################################
options(color=TRUE) #Say output of figures can be in color (b/w for paper)
source('~/Downloads/biom12194-sm-0001-suppdatacode/R/brg.R', echo=TRUE)
reportingTriangle(nc)
View(reportingTriangle(nc))
typeof(reportingTriangle(nc))
typeof(reportingTriangle(nc))
write.csv(reportingTriangle(nc),"nc.csv")
?qnorm
library(forecast)
?arima.sim
source('~/BayesProject/blrp.R', echo=TRUE)
source('~/BayesProject/blrp.R', echo=TRUE)
source('~/BayesProject/blrp.R', echo=TRUE)
source('~/BayesProject/blrp.R', echo=TRUE)
?write.csv
typeof(simData)
attributed(simData)
attributes(simData)
source('~/BayesProject/blrp.R', echo=TRUE)
meningo
attributes(meningo)
attr(meningo,"observed")
influMen
# convert to sts class and extract meningococcal disease time series
salmonella <- read.table(system.file("extdata/salmonella.agona.txt",
package = "surveillance"), header = TRUE)
# look at data.frame
str(salmonella)
salmonellaDisProg <- create.disProg(week = 1:nrow(salmonella),
observed = salmonella$observed,
state = salmonella$state,
start = c(1990, 1))
# look at disProg object
salmonellaDisProg
salmonellaDisProg
source('~/BayesProject/blrp.R', echo=TRUE)
source('~/BayesProject/blrp.R', echo=TRUE)
salmonella
source('~/BayesProject/blrp.R', echo=TRUE)
simData
attr(simData,"observed")
source('~/BayesProject/blrp.R', echo=TRUE)
simData
attr(simData, observed)
attr(simData, "observed")
source('~/BayesProject/blrp.R', echo=TRUE)
attr(simData, "observed")
attr(simData, "observed")
source('~/BayesProject/blrp.R', echo=TRUE)
source('~/BayesProject/blrp.R', echo=TRUE)
source('~/BayesProject/blrp.R', echo=TRUE)
?simulate
source('~/BayesProject/blrp.R', echo=TRUE)
simData
attr(simData,"observed")
attr(simData, "observed")
source('~/BayesProject/blrp.R', echo=TRUE)
attr(simData, "observed")
?simulate
source('~/BayesProject/blrp.R', echo=TRUE)
simData
simData[,,"observed"]
simData["observed"]
simData[,"observed"]
source('~/BayesProject/blrp.R', echo=TRUE)
source('~/BayesProject/blrp.R', echo=TRUE)
source('~/BayesProject/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
source('~/Desktop/blrp.R', echo=TRUE)
install.packages("dengueThailand")
source('~/reporting_delay/manuscript_code/REPORTING_DELAY.R', echo=TRUE)
source('~/reporting_delay/manuscript_code/REPORTING_DELAY.R', echo=TRUE)
source('~/reporting_delay/manuscript_code/REPORTING_DELAY.R', echo=TRUE)
source('~/reporting_delay/manuscript_code/REPORTING_DELAY.R', echo=TRUE)
library(MHadaptive)
library(MCMCpack)
library(forecast)
library(matrixStats)
library(MASS)
library(boot)
setwd("/Users/gcgibson/reporting_delay/manuscript_code/")
source('utils.R')
source('delay_model.R')
source('zero_model.R')
source('bayes_model.R')
## read in data
reporting_triangle <- read.csv("bangkok_10.csv",header = FALSE)
## SET GLOBAL DELAY
D <- 10
### CV START /STOP
start <- 40
stop <-  dim(reporting_triangle)[1]
NSIM <- 100
### INITIALIZE EMPTY VECS
mse_vec <- matrix(NA,nrow=stop-start + 1,ncol=5)
coverage_prob <- matrix(NA,nrow=stop-start + 1,ncol=5)
###  cv cutoffs
for (cv_cutoff in start:stop){
print (cv_cutoff)
test_reporting_triangle <- reporting_triangle[1:cv_cutoff,]
## GET PARTIALLY OBSERVED
po_data <- get_po_data(test_reporting_triangle,D,cv_cutoff)
### MODEL ESTIMATES
delay_model_estimate <- get_delay_model(test_reporting_triangle,po_data,D,NSIM)
#zero_inf_offset_2 <- get_zero_model(test_reporting_triangle,po_data,D,cv_cutoff,NSIM,2)
bayes_hohle <- get_bayes_model(test_reporting_triangle,po_data,D,cv_cutoff,NSIM,delay_model_estimate)
### COMPUTE MSE
truth <- rowSums(test_reporting_triangle)[(cv_cutoff-D +1):cv_cutoff]
mse_vec[(cv_cutoff-start +1),1] <- mean((rowMeans(delay_model_estimate)-truth)^2)
mse_vec[(cv_cutoff-start +1),2] <- mean((rowMeans(bayes_hohle)-truth)^2)
png(paste('fcast',toString(cv_cutoff),'.png',sep=""))
plot((cv_cutoff-D+1):cv_cutoff,truth,col="black",type="l",ylim =c(0,10000))
lines((cv_cutoff-D+1):cv_cutoff,rowMeans(bayes_hohle),col="orange")
lines((cv_cutoff-D+1):cv_cutoff,rowMeans(delay_model_estimate),type="l",col="red")
legend("topleft",legend=c("Truth", "Zero","Bayes","Delay"),
col=c("black","blue", "orange","red"), lty=1:2, cex=0.8)
dev.off()
### Coverage Probability
quant_delay <-rowQuantiles(delay_model_estimate,probs = c(.025,.975))
delay_cp <- 0
for (cp_iter in 1:D){
if (quant_delay[cp_iter,1] <= truth[cp_iter] & truth[cp_iter] <=quant_delay[cp_iter,2]){
delay_cp <- delay_cp + 1
}
}
coverage_prob[(cv_cutoff-start +1),1] <- delay_cp/D
bayes_hohle_delay <-rowQuantiles(bayes_hohle_offset_2,probs = c(.025,.975))
bayes_hohle_cp <- 0
for (cp_iter in 1:D){
if (bayes_hohle_delay[cp_iter,1] <= truth[cp_iter] & truth[cp_iter] <=bayes_hohle_delay[cp_iter,2]){
bayes_hohle_cp <- bayes_hohle_cp + 1
}
}
coverage_prob[(cv_cutoff-start +1),2] <- bayes_hohle_cp/D
}
source('~/reporting_delay/manuscript_code/REPORTING_DELAY.R', echo=TRUE)
library(MHadaptive)
library(MCMCpack)
library(forecast)
library(matrixStats)
library(MASS)
library(boot)
setwd("/Users/gcgibson/reporting_delay/manuscript_code/")
source('utils.R')
source('delay_model.R')
source('zero_model.R')
source('bayes_model.R')
## read in data
reporting_triangle <- read.csv("bangkok_10.csv",header = FALSE)
## SET GLOBAL DELAY
D <- 10
### CV START /STOP
start <- 40
stop <-  dim(reporting_triangle)[1]
NSIM <- 100
### INITIALIZE EMPTY VECS
mse_vec <- matrix(NA,nrow=stop-start + 1,ncol=5)
coverage_prob <- matrix(NA,nrow=stop-start + 1,ncol=5)
###  cv cutoffs
for (cv_cutoff in start:stop){
print (cv_cutoff)
test_reporting_triangle <- reporting_triangle[1:cv_cutoff,]
## GET PARTIALLY OBSERVED
po_data <- get_po_data(test_reporting_triangle,D,cv_cutoff)
### MODEL ESTIMATES
delay_model_estimate <- get_delay_model(test_reporting_triangle,po_data,D,NSIM)
#zero_inf_offset_2 <- get_zero_model(test_reporting_triangle,po_data,D,cv_cutoff,NSIM,2)
bayes_hohle <- get_bayes_model(test_reporting_triangle,po_data,D,cv_cutoff,NSIM,delay_model_estimate)
### COMPUTE MSE
truth <- rowSums(test_reporting_triangle)[(cv_cutoff-D +1):cv_cutoff]
mse_vec[(cv_cutoff-start +1),1] <- mean((rowMeans(delay_model_estimate)-truth)^2)
mse_vec[(cv_cutoff-start +1),2] <- mean((rowMeans(bayes_hohle)-truth)^2)
png(paste('fcast',toString(cv_cutoff),'.png',sep=""))
plot((cv_cutoff-D+1):cv_cutoff,truth,col="black",type="l",ylim =c(0,10000))
lines((cv_cutoff-D+1):cv_cutoff,rowMeans(bayes_hohle),col="orange")
lines((cv_cutoff-D+1):cv_cutoff,rowMeans(delay_model_estimate),type="l",col="red")
legend("topleft",legend=c("Truth", "Zero","Bayes","Delay"),
col=c("black","blue", "orange","red"), lty=1:2, cex=0.8)
dev.off()
### Coverage Probability
quant_delay <-rowQuantiles(delay_model_estimate,probs = c(.025,.975))
delay_cp <- 0
for (cp_iter in 1:D){
if (quant_delay[cp_iter,1] <= truth[cp_iter] & truth[cp_iter] <=quant_delay[cp_iter,2]){
delay_cp <- delay_cp + 1
}
}
coverage_prob[(cv_cutoff-start +1),1] <- delay_cp/D
bayes_hohle_delay <-rowQuantiles(bayes_hohle_offset_2,probs = c(.025,.975))
bayes_hohle_cp <- 0
for (cp_iter in 1:D){
if (bayes_hohle_delay[cp_iter,1] <= truth[cp_iter] & truth[cp_iter] <=bayes_hohle_delay[cp_iter,2]){
bayes_hohle_cp <- bayes_hohle_cp + 1
}
}
coverage_prob[(cv_cutoff-start +1),2] <- bayes_hohle_cp/D
}
